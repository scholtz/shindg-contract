#pragma version 10

// This TEAL was generated by TEALScript v0.94.1
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication(string,string)void
*abi_route_createApplication:
	// symbol: string
	txna ApplicationArgs 2
	extract 2 0

	// name: string
	txna ApplicationArgs 1
	extract 2 0

	// execute createApplication(string,string)void
	callsub createApplication
	int 1
	return

// createApplication(name: string, symbol: string): void
//
// Constructor
// @param name NFT Name
// @param symbol NFT Symbol
createApplication:
	proto 2 0

	// contracts\Shindg.algo.ts:75
	// this.name.value = name
	byte 0x6e616d65 // "name"
	frame_dig -1 // name: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	app_global_put

	// contracts\Shindg.algo.ts:76
	// this.symbol.value = symbol
	byte 0x73796d626f6c // "symbol"
	frame_dig -2 // symbol: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	app_global_put
	retsub

// transferTo(to: Address, tokenId: uint256): void
//
// Execute transfer - change the state of the token.
// @param to Address of receiver
// @param tokenId TokenID
transferTo:
	proto 2 0

	// contracts\Shindg.algo.ts:87
	// assert(this.tokenBox(tokenId).exists)
	frame_dig -2 // tokenId: uint256
	box_len
	swap
	pop
	assert

	// contracts\Shindg.algo.ts:88
	// this.tokenBox(tokenId).value.owner = to
	frame_dig -2 // tokenId: uint256
	box_get

	// box value does not exist: this.tokenBox(tokenId).value
	assert
	store 255 // full array
	load 255 // full array
	int 0
	frame_dig -1 // to: Address
	frame_dig -2 // tokenId: uint256
	dup
	box_del
	pop
	swap
	box_put

	// contracts\Shindg.algo.ts:89
	// this.tokenBox(tokenId).value.controller = globals.zeroAddress
	frame_dig -2 // tokenId: uint256
	box_get

	// box value does not exist: this.tokenBox(tokenId).value
	assert
	store 255 // full array
	load 255 // full array
	int 32
	global ZeroAddress
	frame_dig -2 // tokenId: uint256
	dup
	box_del
	pop
	swap
	box_put
	retsub

// arc72_transferFrom(address,address,uint256)void
*abi_route_arc72_transferFrom:
	// tokenId: uint256
	txna ApplicationArgs 3
	dup
	len
	int 32
	==

	// argument 0 (tokenId) for arc72_transferFrom must be a uint256
	assert

	// to: address
	txna ApplicationArgs 2
	dup
	len
	int 32
	==

	// argument 1 (to) for arc72_transferFrom must be a address
	assert

	// _from: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 2 (_from) for arc72_transferFrom must be a address
	assert

	// execute arc72_transferFrom(address,address,uint256)void
	callsub arc72_transferFrom
	int 1
	return

// arc72_transferFrom(_from: Address, to: Address, tokenId: uint256): void
//
// Transfers ownership of an NFT
arc72_transferFrom:
	proto 3 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dup

	// contracts\Shindg.algo.ts:98
	// token = this.tokenBox(tokenId).value
	frame_dig -3 // tokenId: uint256
	frame_bury 0 // storage key//token

	// contracts\Shindg.algo.ts:100
	// key: Control = { owner: this.txn.sender, controller: _from }
	txn Sender
	frame_dig -1 // _from: Address
	concat
	frame_bury 1 // key: Control

	// *if0_condition
	// contracts\Shindg.algo.ts:102
	// this.txn.sender === _from || this.txn.sender === token.controller || this.controlBox(key).exists
	txn Sender
	frame_dig -1 // _from: Address
	==
	dup
	bnz *skip_or0
	txn Sender
	frame_dig 0 // storage key//token
	box_get

	// box value does not exist: this.tokenBox(tokenId).value
	assert
	store 255 // full array
	load 255 // full array
	extract 32 32
	==
	||

*skip_or0:
	dup
	bnz *skip_or1
	frame_dig 1 // key: Control
	box_len
	swap
	pop
	||

*skip_or1:
	bz *if0_else

	// *if0_consequent
	// contracts\Shindg.algo.ts:103
	// this.transferTo(to, tokenId)
	frame_dig -3 // tokenId: uint256
	frame_dig -2 // to: Address
	callsub transferTo
	b *if0_end

*if0_else:
	// Transfer not authorized
	err

*if0_end:
	retsub

// arc72_approve(address,uint256)void
*abi_route_arc72_approve:
	// tokenId: uint256
	txna ApplicationArgs 2
	dup
	len
	int 32
	==

	// argument 0 (tokenId) for arc72_approve must be a uint256
	assert

	// approved: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 1 (approved) for arc72_approve must be a address
	assert

	// execute arc72_approve(address,uint256)void
	callsub arc72_approve
	int 1
	return

// arc72_approve(approved: Address, tokenId: uint256): void
//
//
// Approve a controller for a single NFT
//
// @param approved Approved controller address
// @param tokenId The ID of the NFT
arc72_approve:
	proto 2 0

	// contracts\Shindg.algo.ts:115
	// assert(this.tokenBox(tokenId).exists)
	frame_dig -2 // tokenId: uint256
	box_len
	swap
	pop
	assert

	// contracts\Shindg.algo.ts:116
	// assert(this.txn.sender === this.tokenBox(tokenId).value.owner)
	txn Sender
	frame_dig -2 // tokenId: uint256
	box_get

	// box value does not exist: this.tokenBox(tokenId).value
	assert
	store 255 // full array
	load 255 // full array
	extract 0 32
	==
	assert

	// contracts\Shindg.algo.ts:118
	// this.tokenBox(tokenId).value.controller = approved
	frame_dig -2 // tokenId: uint256
	box_get

	// box value does not exist: this.tokenBox(tokenId).value
	assert
	store 255 // full array
	load 255 // full array
	int 32
	frame_dig -1 // approved: Address
	frame_dig -2 // tokenId: uint256
	dup
	box_del
	pop
	swap
	box_put
	retsub

// arc72_setApprovalForAll(address,bool)void
*abi_route_arc72_setApprovalForAll:
	// approved: bool
	txna ApplicationArgs 2
	dup
	len
	int 1
	==

	// argument 0 (approved) for arc72_setApprovalForAll must be a bool
	assert
	int 0
	getbit

	// operator: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 1 (operator) for arc72_setApprovalForAll must be a address
	assert

	// execute arc72_setApprovalForAll(address,bool)void
	callsub arc72_setApprovalForAll
	int 1
	return

// arc72_setApprovalForAll(operator: Address, approved: boolean): void
//
//
// Approve an operator for all NFTs for a user
//
// @param operator Approved operator address
// @param approved true to give approval, false to revoke
// @returns
arc72_setApprovalForAll:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// contracts\Shindg.algo.ts:130
	// key: Control = { owner: this.txn.sender, controller: operator }
	txn Sender
	frame_dig -1 // operator: Address
	concat
	frame_bury 0 // key: Control

	// *if1_condition
	// contracts\Shindg.algo.ts:132
	// approved
	frame_dig -2 // approved: boolean
	bz *if1_elseif1_condition

	// *if1_consequent
	// contracts\Shindg.algo.ts:132
	// this.controlBox(key).value = ''
	frame_dig 0 // key: Control
	dup
	box_del
	pop
	byte 0x // ""
	box_put
	b *if1_end

*if1_elseif1_condition:
	// contracts\Shindg.algo.ts:133
	// this.controlBox(key).exists
	frame_dig 0 // key: Control
	box_len
	swap
	pop
	bz *if1_end

	// *if1_elseif1_consequent
	// contracts\Shindg.algo.ts:133
	// this.controlBox(key).delete()
	frame_dig 0 // key: Control
	box_del

*if1_end:
	retsub

// arc72_ownerOf(uint256)address
*abi_route_arc72_ownerOf:
	// The ABI return prefix
	byte 0x151f7c75

	// tokenId: uint256
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 0 (tokenId) for arc72_ownerOf must be a uint256
	assert

	// execute arc72_ownerOf(uint256)address
	callsub arc72_ownerOf
	concat
	log
	int 1
	return

// arc72_ownerOf(tokenId: uint256): Address
//
//
// Returns the address of the current owner of the NFT with the given tokenId
//
// @param tokenId The ID of the NFT
// @returns The current owner of the NFT
arc72_ownerOf:
	proto 1 1

	// contracts\Shindg.algo.ts:147
	// return this.tokenBox(tokenId).value.owner;
	frame_dig -1 // tokenId: uint256
	box_get

	// box value does not exist: this.tokenBox(tokenId).value
	assert
	store 255 // full array
	load 255 // full array
	extract 0 32
	retsub

// arc72_tokenURI(uint256)string
*abi_route_arc72_tokenURI:
	// The ABI return prefix
	byte 0x151f7c75

	// tokenId: uint256
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 0 (tokenId) for arc72_tokenURI must be a uint256
	assert

	// execute arc72_tokenURI(uint256)string
	callsub arc72_tokenURI
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	log
	int 1
	return

// arc72_tokenURI(tokenId: uint256): string
//
//
// Returns a URI pointing to the NFT metadata
//
// @param tokenId The ID of the NFT
// @returns URI to token metadata
arc72_tokenURI:
	proto 1 1

	// contracts\Shindg.algo.ts:159
	// return this.tokenBox(tokenId).value.uri;
	frame_dig -1 // tokenId: uint256
	box_get

	// box value does not exist: this.tokenBox(tokenId).value
	assert
	store 255 // full array
	int 70
	load 255 // full array
	load 255 // full array
	uncover 2
	extract_uint16
	dup // duplicate start of element
	load 255 // full array
	swap
	extract_uint16 // get number of elements
	int 1 // get type length
	* // multiply by type length
	int 2
	+ // add two for length
	extract3
	extract 2 0
	retsub

// arc72_totalSupply()uint256
*abi_route_arc72_totalSupply:
	// The ABI return prefix
	byte 0x151f7c75

	// execute arc72_totalSupply()uint256
	callsub arc72_totalSupply
	dup
	bitlen
	int 256
	<=

	// arc72_totalSupply return value overflowed 256 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	concat
	log
	int 1
	return

// arc72_totalSupply(): uint256
//
// Returns the number of NFTs currently defined by this contract
arc72_totalSupply:
	proto 0 1

	// contracts\Shindg.algo.ts:167
	// return this.index.value;
	byte 0x696e646578 // "index"
	app_global_get
	retsub

// arc72_tokenByIndex(uint256)uint256
*abi_route_arc72_tokenByIndex:
	// The ABI return prefix
	byte 0x151f7c75

	// index: uint256
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 0 (index) for arc72_tokenByIndex must be a uint256
	assert

	// execute arc72_tokenByIndex(uint256)uint256
	callsub arc72_tokenByIndex
	dup
	bitlen
	int 256
	<=

	// arc72_tokenByIndex return value overflowed 256 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	concat
	log
	int 1
	return

// arc72_tokenByIndex(index: uint256): uint256
//
// Returns the token ID of the token with the given index among all NFTs defined by the contract
arc72_tokenByIndex:
	proto 1 1

	// contracts\Shindg.algo.ts:175
	// return index;
	frame_dig -1 // index: uint256
	retsub

// mint(address,string,string,string,string)void
*abi_route_mint:
	// uri: string
	txna ApplicationArgs 5
	extract 2 0

	// image: string
	txna ApplicationArgs 4
	extract 2 0

	// seat: string
	txna ApplicationArgs 3
	extract 2 0

	// area: string
	txna ApplicationArgs 2
	extract 2 0

	// to: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==

	// argument 4 (to) for mint must be a address
	assert

	// execute mint(address,string,string,string,string)void
	callsub mint
	int 1
	return

// mint(to: Address, area: string, seat: string, image: string, uri: string): void
mint:
	proto 5 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dup

	// contracts\Shindg.algo.ts:180
	// assert(
	//       this.txn.sender === globals.creatorAddress,
	//       'Only creator is allowed to mint specific NFTs for this collection'
	//     )
	txn Sender
	global CreatorAddress
	==

	// Only creator is allowed to mint specific NFTs for this collection
	assert

	// contracts\Shindg.algo.ts:185
	// index = this.index.value
	byte 0x696e646578 // "index"
	app_global_get
	frame_bury 0 // index: uint256

	// contracts\Shindg.algo.ts:187
	// token: Token = {
	//       owner: to,
	//       controller: Address.zeroAddress,
	//       state: 'ON_SALE',
	//       area: area,
	//       seat: seat,
	//       uri: uri,
	//       image: image,
	//     }
	byte 0x // initial head
	byte 0x // initial tail
	byte 0x004a // initial head offset
	frame_dig -1 // to: Address
	callsub *process_static_tuple_element
	global ZeroAddress
	callsub *process_static_tuple_element
	byte 0x00074f4e5f53414c45
	callsub *process_dynamic_tuple_element
	frame_dig -2 // area: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	frame_dig -3 // seat: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	frame_dig -5 // uri: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	frame_dig -4 // image: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	pop // pop head offset
	concat // concat head and tail
	frame_bury 1 // token: Token

	// contracts\Shindg.algo.ts:197
	// this.tokenBox(index).value = token
	frame_dig 0 // index: uint256
	dup
	box_del
	pop
	frame_dig 1 // token: Token
	box_put

	// contracts\Shindg.algo.ts:198
	// this.transferTo(to, index)
	frame_dig 0 // index: uint256
	frame_dig -1 // to: Address
	callsub transferTo

	// contracts\Shindg.algo.ts:199
	// this.index.value = index + 1
	byte 0x696e646578 // "index"
	frame_dig 0 // index: uint256
	byte 0x0000000000000000000000000000000000000000000000000000000000000001
	b+
	dup
	bitlen
	int 256
	<=

	// index + 1 overflowed 256 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	app_global_put
	retsub

*create_NoOp:
	method "createApplication(string,string)void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	method "arc72_transferFrom(address,address,uint256)void"
	method "arc72_approve(address,uint256)void"
	method "arc72_setApprovalForAll(address,bool)void"
	method "arc72_ownerOf(uint256)address"
	method "arc72_tokenURI(uint256)string"
	method "arc72_totalSupply()uint256"
	method "arc72_tokenByIndex(uint256)uint256"
	method "mint(address,string,string,string,string)void"
	txna ApplicationArgs 0
	match *abi_route_arc72_transferFrom *abi_route_arc72_approve *abi_route_arc72_setApprovalForAll *abi_route_arc72_ownerOf *abi_route_arc72_tokenURI *abi_route_arc72_totalSupply *abi_route_arc72_tokenByIndex *abi_route_mint

	// this contract does not implement the given ABI method for call NoOp
	err

*process_static_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -1 // element
	concat
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub

*process_dynamic_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -2 // head offset
	concat
	frame_bury -4 // tuple head
	frame_dig -1 // element
	dup
	len
	frame_dig -2 // head offset
	btoi
	+
	itob
	extract 6 2
	frame_bury -2 // head offset
	frame_dig -3 // tuple tail
	swap
	concat
	frame_bury -3 // tuple tail
	frame_dig -4 // tuple head
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub