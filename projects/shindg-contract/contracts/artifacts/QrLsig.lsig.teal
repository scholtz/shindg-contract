#pragma version 10
//#pragma mode logicsig

// This TEAL was generated by TEALScript v0.92.0
// https://github.com/algorandfoundation/TEALScript

// The address of this logic signature is KPE3R6SOG6JMJX6A3OK2NSZOOJAHP5K23RIBQOKXEXU4SSWCW5FFDDXN4U

b *route_logic

// logic()void
*route_logic:
	// execute logic()void
	callsub logic
	int 1
	return

// logic(): void
//
// Verify this is an opt in transaction
logic:
	proto 0 0

	// contracts\QrLsig.algo.ts:9
	// verifyTxn(this.txn, {
	//       // It's very important to set fee to 0 for delegated logic signatures
	//       // Otherwise the fee can be used to drain the signer's account
	//       fee: 0,
	//       // Also very important to check that the rekey is set to zero address
	//       rekeyTo: globals.zeroAddress,
	//       // Finally we must ensure that this is not a close transaction, which will drain the signer's account of the given asset
	//       assetCloseTo: globals.zeroAddress,
	//     })
	// verify fee
	txn Fee
	int 0
	==

	// transaction verification failed: {"txn":"this.txn","field":"fee","expected":"0"}
	assert

	// verify rekeyTo
	txn RekeyTo
	global ZeroAddress
	==

	// transaction verification failed: {"txn":"this.txn","field":"rekeyTo","expected":"globals.zeroAddress"}
	assert

	// verify assetCloseTo
	txn AssetCloseTo
	global ZeroAddress
	==

	// transaction verification failed: {"txn":"this.txn","field":"assetCloseTo","expected":"globals.zeroAddress"}
	assert

	// contracts\QrLsig.algo.ts:21
	// assert(this.txn.applicationID === this.APP_ID)
	txn ApplicationID
	pushints TMPL_APP_ID
	==
	assert

	// contracts\QrLsig.algo.ts:22
	// assert(this.txn.applicationArgs[0] === method('verifyCreator(axfer,asset)void'))
	txn ApplicationArgs 0
	method "verifyCreator(axfer,asset)void"
	==
	assert
	retsub