{
  "hints": {
    "createApplication(string,string)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "arc72_transferFrom(address,address,uint256)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc72_approve(address,uint256)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc72_setApprovalForAll(address,bool)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc72_ownerOf(uint256)address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc72_tokenURI(uint256)string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc72_totalSupply()uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc72_tokenByIndex(uint256)uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "mint(uint64,address,string,string,string,string,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "checkIn(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "buy(txn,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setPrice(uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setNotForSale(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "index": {
          "type": "uint64",
          "key": "index"
        },
        "name": {
          "type": "bytes",
          "key": "name"
        },
        "symbol": {
          "type": "bytes",
          "key": "symbol"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 2,
      "num_uints": 1
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "Shindg",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "desc": "Constructor",
        "args": [
          {
            "name": "name",
            "type": "string",
            "desc": "NFT Name"
          },
          {
            "name": "symbol",
            "type": "string",
            "desc": "NFT Symbol"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "arc72_transferFrom",
        "desc": "Transfers ownership of an NFT",
        "args": [
          {
            "name": "_from",
            "type": "address"
          },
          {
            "name": "to",
            "type": "address"
          },
          {
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "arc72_approve",
        "desc": "Approve a controller for a single NFT",
        "args": [
          {
            "name": "approved",
            "type": "address",
            "desc": "Approved controller address"
          },
          {
            "name": "tokenId",
            "type": "uint256",
            "desc": "The ID of the NFT"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "arc72_setApprovalForAll",
        "desc": "Approve an operator for all NFTs for a user",
        "args": [
          {
            "name": "operator",
            "type": "address",
            "desc": "Approved operator address"
          },
          {
            "name": "approved",
            "type": "bool",
            "desc": "true to give approval, false to revoke"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "arc72_ownerOf",
        "desc": "Returns the address of the current owner of the NFT with the given tokenId",
        "readonly": true,
        "args": [
          {
            "name": "tokenId",
            "type": "uint256",
            "desc": "The ID of the NFT"
          }
        ],
        "returns": {
          "type": "address",
          "desc": "The current owner of the NFT"
        }
      },
      {
        "name": "arc72_tokenURI",
        "desc": "Returns a URI pointing to the NFT metadata",
        "readonly": true,
        "args": [
          {
            "name": "tokenId",
            "type": "uint256",
            "desc": "The ID of the NFT"
          }
        ],
        "returns": {
          "type": "string",
          "desc": "URI to token metadata"
        }
      },
      {
        "name": "arc72_totalSupply",
        "desc": "Returns the number of NFTs currently defined by this contract",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "uint256"
        }
      },
      {
        "name": "arc72_tokenByIndex",
        "desc": "Returns the token ID of the token with the given index among all NFTs defined by the contract",
        "readonly": true,
        "args": [
          {
            "name": "index",
            "type": "uint256"
          }
        ],
        "returns": {
          "type": "uint256"
        }
      },
      {
        "name": "mint",
        "args": [
          {
            "name": "state",
            "type": "uint64"
          },
          {
            "name": "to",
            "type": "address"
          },
          {
            "name": "area",
            "type": "string"
          },
          {
            "name": "seat",
            "type": "string"
          },
          {
            "name": "image",
            "type": "string"
          },
          {
            "name": "uri",
            "type": "string"
          },
          {
            "name": "price",
            "type": "uint64"
          },
          {
            "name": "currency",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "checkIn",
        "desc": "Owner of NFT can check in or check out from the event",
        "args": [
          {
            "name": "nftIndex",
            "type": "uint64"
          },
          {
            "name": "state",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "buy",
        "desc": "Owner of NFT can check in or check out from the event",
        "args": [
          {
            "name": "buyTxn",
            "type": "txn",
            "desc": "The buy transaction"
          },
          {
            "name": "nftIndex",
            "type": "uint64",
            "desc": "NFT Index"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setPrice",
        "desc": "Owner of NFT can check in or check out from the event",
        "args": [
          {
            "name": "nftIndex",
            "type": "uint64",
            "desc": "NFT Index"
          },
          {
            "name": "price",
            "type": "uint64",
            "desc": "The price which has to be paid"
          },
          {
            "name": "currency",
            "type": "uint64",
            "desc": "The currency for price"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setNotForSale",
        "desc": "Set not for sale",
        "args": [
          {
            "name": "nftIndex",
            "type": "uint64",
            "desc": "NFT"
          }
        ],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}